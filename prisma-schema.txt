prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String          @id @default(uuid())
  jenisKelamin             String?
  alamatDomisili           String?
  alamatTinggal            String?
  mulaiBergabungRS         DateTime?
  mulaiBekerjaUnitTerakhir DateTime?
  statusKepegawaian        String?
  asalInstitusiPendidikan  String?
  kelulusanTahun           Int?
  tanggalTerbitSTR         DateTime?
  tanggalBerakhirSTR       String?
  tanggalTerbitSIPP        DateTime?
  jabatanSaatIni           String?
  levelPKSaatIni           String?
  levelPKYangDiajukan      String?
  levelPerawatManajer      String?
  programMutuRCA           Boolean
  setuju                   Boolean
  Akun                     Akun[]
  cpdForPK1                UserCPD_PK1[]
  cpdForPK2                UserCPD_PK2[]
  cpdForPK3                UserCPD_PK3[]
  cpdForPK4                UserCPD_PK4[]
  cpdForPK5                UserCPD_PK5[]
  orientasiYangDiikuti     UserOrientasi[]
  pelatihanYangDiikuti     UserPelatihan[]
}

model Akun {
  iduser                    String              @id @default(uuid())
  email                     String              @unique
  password                  String
  last_login                DateTime?
  nama                      String
  role                      String
  pendidikanTerakhir        PendidikanTerakhir?
  unitTempatBekerjaTerakhir String?
  userId                    String?
  masterRumahSakitId        String?
  masterRuanganRSId         String?
  created_at                DateTime            @default(now())
  MasterRuanganRS           MasterRuanganRS?    @relation("AkunRuanganRS", fields: [masterRuanganRSId], references: [id])
  MasterRumahSakit          MasterRumahSakit?   @relation("AkunRumahSakit", fields: [masterRumahSakitId], references: [id])
  User                      User?               @relation(fields: [userId], references: [id])
  UserAssesmen              UserAssesmen[]
  UserLogbookKaru           UserLogbookKaru?
  UserPenilaianKaruPerawat  UserPenilaianKaru[] @relation("akun-perawat")
  UserPenilaianKaru         UserPenilaianKaru[]

  @@index([masterRuanganRSId], map: "Akun_masterRuanganRSId_fkey")
  @@index([masterRumahSakitId], map: "Akun_masterRumahSakitId_fkey")
  @@index([userId], map: "Akun_userId_fkey")
}

model MasterRumahSakit {
  id        String            @id @default(uuid())
  nama      String
  akun      Akun[]            @relation("AkunRumahSakit")
  ruanganRS MasterRuanganRS[] @relation("RumahSakitToRuanganRS")
}

model MasterRuanganRS {
  id         String           @id @default(uuid())
  nama       String
  id_rs      String
  akun       Akun[]           @relation("AkunRuanganRS")
  rumahSakit MasterRumahSakit @relation("RumahSakitToRuanganRS", fields: [id_rs], references: [id])

  @@index([id_rs], map: "MasterRuanganRS_id_rs_fkey")
}

model MasterOrientasi {
  id    Int             @id @default(autoincrement())
  value String
  users UserOrientasi[]
}

model MasterPelatihan {
  id    Int             @id @default(autoincrement())
  value String
  users UserPelatihan[]
}

model MasterCPD_PK1 {
  id    Int           @id @default(autoincrement())
  value String
  users UserCPD_PK1[]
}

model MasterCPD_PK2 {
  id    Int           @id @default(autoincrement())
  value String
  users UserCPD_PK2[]
}

model MasterCPD_PK3 {
  id    Int           @id @default(autoincrement())
  value String
  users UserCPD_PK3[]
}

model MasterCPD_PK4 {
  id    Int           @id @default(autoincrement())
  value String
  users UserCPD_PK4[]
}

model MasterCPD_PK5 {
  id    Int           @id @default(autoincrement())
  value String
  users UserCPD_PK5[]
}

model UserOrientasi {
  id          String          @id @default(uuid())
  userId      String
  orientasiId Int
  orientasi   MasterOrientasi @relation(fields: [orientasiId], references: [id])
  user        User            @relation(fields: [userId], references: [id])

  @@unique([userId, orientasiId])
  @@index([orientasiId], map: "UserOrientasi_orientasiId_fkey")
}

model UserPelatihan {
  id          String          @id @default(uuid())
  userId      String
  pelatihanId Int
  pelatihan   MasterPelatihan @relation(fields: [pelatihanId], references: [id])
  user        User            @relation(fields: [userId], references: [id])

  @@unique([userId, pelatihanId])
  @@index([pelatihanId], map: "UserPelatihan_pelatihanId_fkey")
}

model UserCPD_PK1 {
  id     Int           @id @default(autoincrement())
  userId String
  cpdId  Int
  cpd    MasterCPD_PK1 @relation(fields: [cpdId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([userId, cpdId])
  @@index([cpdId], map: "UserCPD_PK1_cpdId_fkey")
}

model UserCPD_PK2 {
  id     Int           @id @default(autoincrement())
  userId String
  cpdId  Int
  cpd    MasterCPD_PK2 @relation(fields: [cpdId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([userId, cpdId])
  @@index([cpdId], map: "UserCPD_PK2_cpdId_fkey")
}

model UserCPD_PK3 {
  id     Int           @id @default(autoincrement())
  userId String
  cpdId  Int
  cpd    MasterCPD_PK3 @relation(fields: [cpdId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([userId, cpdId])
  @@index([cpdId], map: "UserCPD_PK3_cpdId_fkey")
}

model UserCPD_PK4 {
  id     Int           @id @default(autoincrement())
  userId String
  cpdId  Int
  cpd    MasterCPD_PK4 @relation(fields: [cpdId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([userId, cpdId])
  @@index([cpdId], map: "UserCPD_PK4_cpdId_fkey")
}

model UserCPD_PK5 {
  id     Int           @id @default(autoincrement())
  userId String
  cpdId  Int
  cpd    MasterCPD_PK5 @relation(fields: [cpdId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([userId, cpdId])
  @@index([cpdId], map: "UserCPD_PK5_cpdId_fkey")
}

model MasterPertanyaanAssesmen {
  id           Int                  @id @default(autoincrement())
  skp          String?
  sub_kategori String?
  kode         String?
  keterampilan String?
  vokasi       String?
  ners         String?
  tipe         String?
  priority     Int?
  status       Int                  @default(0)
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt
  jawaban      UserJawabanAsesmen[]
}

model UserAssesmen {
  id                    String               @id @default(uuid())
  tanggal               DateTime             @default(now())
  skp_1                 String?
  skp_2                 String?
  skp_3                 String?
  skp_4                 String?
  skp_5                 String?
  skp_6                 String?
  email                 String
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  id_master_pertanyaans String?              @db.Text
  id_penilaian          String?
  Akun                  Akun                 @relation(fields: [email], references: [email])
  UserPenilaianKaru     UserPenilaianKaru?   @relation(fields: [id_penilaian], references: [id])
  jawaban               UserJawabanAsesmen[]
  UserLogbookKaru       UserLogbookKaru[]

  @@index([email], map: "UserAssesmen_email_fkey")
  @@index([id_penilaian], map: "UserAssesmen_id_penilaian_fkey")
}

model UserJawabanAsesmen {
  id                         Int                      @id @default(autoincrement())
  skor                       Int
  created_at                 DateTime                 @default(now())
  UserAssesmenId             String
  MasterPertanyaanAssesmenId Int
  jawaban                    String
  MasterPertanyaanAssesmen   MasterPertanyaanAssesmen @relation(fields: [MasterPertanyaanAssesmenId], references: [id])
  UserAssesmen               UserAssesmen             @relation(fields: [UserAssesmenId], references: [id])

  @@index([MasterPertanyaanAssesmenId], map: "UserJawabanAsesmen_MasterPertanyaanAssesmenId_fkey")
  @@index([UserAssesmenId], map: "UserJawabanAsesmen_UserAssesmenId_fkey")
}

model MasterKeterampilanDiagnosis {
  id              String @id
  nama_kompetensi String
}

model MasterKeterampilanIntervensi {
  id              String @id
  nama_kompetensi String
}

model MasterLogBookKaru {
  id                     Int                      @id @default(autoincrement())
  skp                    String
  kegiatan               String
  status                 Int                      @default(1)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  UserJawabanLogBookKaru UserJawabanLogBookKaru[]
}

model UserLogbookKaru {
  id               String                   @id @default(uuid())
  email            String                   @unique
  created_at       DateTime                 @default(now())
  updated_at       DateTime                 @default(now()) @updatedAt
  userAsesmenId    String
  idMasterLogBooks String?                  @db.Text
  jawabanLogBook   UserJawabanLogBookKaru[]
  Akun             Akun                     @relation(fields: [email], references: [email])
  UserAssesmen     UserAssesmen             @relation(fields: [userAsesmenId], references: [id])

  @@index([userAsesmenId], map: "UserLogbookKaru_userAsesmenId_fkey")
}

model UserJawabanLogBookKaru {
  id                  String            @id @default(uuid())
  idUserLogBookKaru   String
  idMasterLogBookKaru Int
  jawaban             Int               @default(0)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @default(now()) @updatedAt
  masterLogBookKaru   MasterLogBookKaru @relation(fields: [idMasterLogBookKaru], references: [id])
  userLogbookKaru     UserLogbookKaru   @relation(fields: [idUserLogBookKaru], references: [id])

  @@index([idMasterLogBookKaru], map: "UserJawabanLogBookKaru_idMasterLogBookKaru_fkey")
  @@index([idUserLogBookKaru], map: "UserJawabanLogBookKaru_idUserLogBookKaru_fkey")
}

model MasterPenilaianKaru {
  id                       Int                        @id @default(autoincrement())
  kategori                 String
  penilaian                String
  status                   Int                        @default(1)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now()) @updatedAt
  UserJawabanPenilaianKaru UserJawabanPenilaianKaru[]
}

model UserPenilaianKaru {
  id                       String                     @id @default(uuid())
  email                    String
  score                    Float                      @default(0)
  idMasterPenilaianKaru    String                     @db.Text
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now()) @updatedAt
  email_perawat            String?                    @db.VarChar(100)
  tanggal                  String?                    @db.VarChar(100)
  UserAssesmen             UserAssesmen[]
  UserJawabanPenilaianKaru UserJawabanPenilaianKaru[]
  AkunPerawat              Akun?                      @relation("akun-perawat", fields: [email_perawat], references: [email], onDelete: Restrict, onUpdate: Restrict, map: "UserPenilaianKaru_Akun_FK")
  Akun                     Akun                       @relation(fields: [email], references: [email])

  @@index([email], map: "UserPenilaianKaru_email_fkey")
  @@index([email_perawat], map: "UserPenilaianKaru_Akun_FK")
}

model UserJawabanPenilaianKaru {
  id                    Int                 @id @default(autoincrement())
  idUserPenilaianKaru   String
  idMasterPenilaianKaru Int
  Skor                  Int?
  MasterPenilaianKaru   MasterPenilaianKaru @relation(fields: [idMasterPenilaianKaru], references: [id])
  UserPenilaianKaru     UserPenilaianKaru   @relation(fields: [idUserPenilaianKaru], references: [id])

  @@index([idMasterPenilaianKaru], map: "UserJawabanPenilaianKaru_idMasterPenilaianKaru_fkey")
  @@index([idUserPenilaianKaru], map: "UserJawabanPenilaianKaru_idUserPenilaianKaru_fkey")
}

enum PendidikanTerakhir {
  VOKASI
  NERS
  S2_KEP
}
